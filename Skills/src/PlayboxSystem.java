
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author khura
 */
public class PlayboxSystem extends javax.swing.JFrame {

    /**
     * Creates new form PlayboxSystem
     */
    public PlayboxSystem() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nameInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        costInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        retailInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        numSoldInput = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        title.setText("Playbox Sales System");

        jLabel1.setText("Product Name: ");

        jLabel2.setText("Cost: ");

        jLabel3.setText("Retail Price:");

        jLabel4.setText("Number Sold: ");

        numSoldInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numSoldInputActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 102, 102));
        jButton1.setForeground(java.awt.Color.white);
        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Read");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(102, 255, 102));
        jButton6.setText("Average");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6))
                    .addComponent(title)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(costInput, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(retailInput))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(numSoldInput, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(152, 152, 152))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(costInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(retailInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(numSoldInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, nameInput});

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Initilizing varibles needed later on in the program 
    //Arraylist to store entries 
    ArrayList<productData> entries = new ArrayList<>();
    //Boolean to check if there is a file that is currently being worked on 
    boolean savedFile = false;
    //The file currently being worked on 
    File workingFile;
//This function displays the product data in the jTextArea with formating and titles

    public void displayData() {
        jTextArea1.setText("");
        String titles = String.format("%s\t%20s\t%25s\t%25s\t%25s\t%25s\t%25s\t\n", "Index", "Product Name", "Cost", "Retail Price", "Number Sold", "Revenue", "Profit");
        jTextArea1.append(titles);
        for (int i = 0; i < entries.size(); i++) {
            jTextArea1.append(i + 1 + " " + entries.get(i).toString());
            System.out.println(entries.get(i).toString());
        }

    }
//This function reads the selected file and add the comma seperated values into the a temp class which is then added to the entries function

    public void readFile(File f) throws FileNotFoundException, IOException {
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        entries.clear();
        boolean done = false;
        while (!done) {
            String currentLine = br.readLine();
            if (currentLine == null) {
                done = true;
            } else {
                String data[] = currentLine.split(",");
                productData temp = new productData(data[0], Double.parseDouble(data[1]), Double.parseDouble(data[2]), Integer.parseInt(data[3]));
                entries.add(temp);
            }
        }
        br.close();
        //This sorts the entries arraylist based on the integer value of the numbers sold, so sorts them from top selling to lowest selling
        Collections.sort(entries, (productData obj1, productData obj2) -> Integer.compare(obj2.getNumbersSold(), obj1.getNumbersSold()));
        for (productData obj : entries) {
            System.out.println(obj.getNumbersSold());
        }
        displayData();

    }
//this function takes the data from the entries arraylist and writes it to a file which can be used for later 

    public void writeFile(File f) throws IOException {
        FileWriter fw = new FileWriter(f.getAbsolutePath());
        BufferedWriter bw = new BufferedWriter(fw);

        for (int i = 0; i < entries.size(); i++) {
            bw.write(entries.get(i).saveToFile());
            System.out.println(entries.get(i).saveToFile());
            bw.newLine();
        }
        savedFile = true;
        bw.close();
    }
    private void numSoldInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numSoldInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numSoldInputActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        //This function runs when the save button is pressed 
        //It gives the user the option to choose a csv file or create a new one and then save the data to it using the write function
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Comma Separated Value", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            if (!f.exists()) {
                try {
                    // If the file doesn't exist, create a new one
                    f.createNewFile();
                } catch (IOException ex) {
                    // Handle exceptions if file creation fails
                    Logger.getLogger(PlayboxSystem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    // If the file exists, write the arraylist to the file and show a success message
                    writeFile(f);
                    JOptionPane.showMessageDialog(rootPane, "Saved to File", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    // Handle exceptions if writing to file fails
                    Logger.getLogger(PlayboxSystem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
//This function lets the user choose a csv containing data to be read and added to the GUI
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Comma Separated Value", "csv");
        chooser.setFileFilter(filter);

        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            savedFile = true;
            workingFile = chooser.getSelectedFile();
            try {
                // Read the selected file to load data into the entries arraylist
                readFile(f);
            } catch (IOException ex) {
                // Handle exceptions if reading from file fails
                Logger.getLogger(PlayboxSystem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
//This function runs when the delete button is run 
//It gives teh user a prompt to enter a index which this will then delete and then update the working file 
        try {
            // Prompt the user to enter a number indicating the data to remove
            int answer = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Which product would you like to remove? \n(Please enter the index)", "Which One?", JOptionPane.INFORMATION_MESSAGE));

            // Remove the specified entry from the arraylist
            entries.remove(answer - 1);

            // If a file has been saved previously, update the file after removing the entry
            if (savedFile) {
                writeFile(workingFile);
            }

            // Update the display with the modified arraylist
            displayData();
        } catch (NumberFormatException e) {
            // Handle the exception if the input is not a number
            JOptionPane.showMessageDialog(rootPane, "Please Enter a Number", "", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            // Handle exceptions if writing to file fails
            Logger.getLogger(PlayboxSystem.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
//This function is run when the average button is pressed 
//It will calculate the average cost and retail prices and diplay it in a jOptionPane
        double averagePrice = 0;
        double totalPrice = 0;
        for (int i = 0; i < entries.size(); i++) {

            totalPrice += entries.get(i).getRetailPrice();
        }
        averagePrice = totalPrice / entries.size();

        double averageCost = 0;
        double totalCost = 0;
        for (int i = 0; i < entries.size(); i++) {

            totalCost += entries.get(i).getCost();
        }
        averageCost = totalCost / entries.size();
        String output = String.format("Average Prices: %.2f \n Average Costs: %.2f", averagePrice, averageCost);
        JOptionPane.showMessageDialog(rootPane, output, "Averages", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            //Checks if inputs are empty
            if ("".equals(nameInput.getText()) || "".equals(costInput.getText()) || "".equals(retailInput.getText()) || "".equals(numSoldInput.getText())) {
                JOptionPane.showMessageDialog(rootPane, "Please Do Not Leave Anything Blank", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            //Check if the name is already an entry we have 
            if (entries.size() >= 1) {
                for (productData obj : entries) {
                    if (nameInput.getText().equals(obj.getProductName())) {
                        JOptionPane.showMessageDialog(rootPane, "This Product already exists", "Error", JOptionPane.ERROR_MESSAGE);
                        nameInput.setText("");
                        costInput.setText("");
                        retailInput.setText("");
                        numSoldInput.setText("");
                        return;
                    }
                }
            }
//Will take inputs and turn them to the productData class and append the class to the entries arraylist while also sorting it again to have the top selling product in the top
            productData temp = new productData(nameInput.getText(), Double.parseDouble(costInput.getText()), Double.parseDouble(retailInput.getText()), Integer.parseInt(numSoldInput.getText()));
            System.out.println(temp.toString());
            entries.add(temp);
            Collections.sort(entries, (productData obj1, productData obj2) -> Integer.compare(obj2.getNumbersSold(), obj1.getNumbersSold()));
            nameInput.setText("");
            costInput.setText("");
            retailInput.setText("");
            numSoldInput.setText("");
            displayData();
        } catch (NumberFormatException e) {
            //Checks if a word was entered instead of a number
            JOptionPane.showMessageDialog(rootPane, "Please enter a number for cost, price and number sold", "Error", JOptionPane.ERROR_MESSAGE);
            nameInput.setText("");
            costInput.setText("");
            retailInput.setText("");
            numSoldInput.setText("");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Displays the data when the view button is pressed 
        displayData();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayboxSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayboxSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayboxSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayboxSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayboxSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField costInput;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField nameInput;
    private javax.swing.JTextField numSoldInput;
    private javax.swing.JTextField retailInput;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
